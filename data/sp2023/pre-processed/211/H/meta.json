{
	"InstallUUIDStack":[
		"b9ea5e5e-306c-4293-bc2e-e6742c6760c3"
	],
	"InfectionStack":[
		"48a244dc-86a8-4445-907d-d48187722586",
		"b9ea5e5e-306c-4293-bc2e-e6742c6760c3"
	],
	"ProjectUUID":"48a244dc-86a8-4445-907d-d48187722586",
	"CreatorUUID":"b9ea5e5e-306c-4293-bc2e-e6742c6760c3",
	"History":[
		{"T":"CwZSk=","P":0,"L":"T","E":"void setud"},
		{"T":"CwZUA=","P":9,"L":"T","E":"\\bp() {\n    \n    "},
		{"T":"CwZYE=","P":"20-24","L":"T","E":"\\\\b[20-24]}\n\nvoo"},
		{"T":"CwZZ4=","P":25,"L":"T","E":"\\bid draw() {\n    \n    "},
		{"T":"CwZeE=","P":"42-46","L":"T","E":"\\\\b[42-46]}"},
		{
			"T":"Cwb3Q=",
			"P":"0-43",
			"L":"P",
			"E":"// Julia Set\n// The Coding Train / Daniel Shiffman\n// https://thecodingtrain.com/CodingChallenges/022-juliaset.html\n// https://youtu.be/fAsaSkmbF5s\n// https://editor.p5js.org/codingtrain/sketches/G6qbMmaI\n\n// The biggest difference from the Processing version this is based on\n// is that the pixel arrays do not have one index for each pixel, but\n// instead have 4 indices for each pixel, representing the 4 color\n// components for that pixel (red, green, blue and alpha).\n//\n// To set a single pixel, this code therefore has to multiply the\n// indexes by 4, and then set 4 consecutive entries in the pixel array.\n//\n// However, since we're not using transparency here, and we have a\n// background() call that fills the entire canvas with a color, we\n// don't need to change the alpha value, so can set only the first 3.\n//\n//\n// The next big difference is that this version of the code has three\n// global arrays that it uses to set those entries in the pixels array,\n// instead of calculating the color values to use for every pixel.\n//\n// This change was done because the code used to to calculate the color\n// values is a bit slow. Since there are only 100 different values\n// (from 0 up to maxiterations), there are only 100 different colors,\n// so we can easily calculate them in advance and then use them later.\n//\n// To do this, the code for creating a color from how long it took to\n// get to infinity was moved from draw() to setup(), with a loop that\n// saves the color for every possible iteration count (aka value of n).\n//\n// Also, the maxiterations constant was moved to the top to be reused.\n\nlet angle = 0;\n\n// Maximum number of iterations for each point on the complex plane\nconst maxiterations = 100;\n\n// Colors to be used for each possible iteration count\nconst colorsRed = [];\nconst colorsGreen = [];\nconst colorsBlue = [];\n\nfunction setup() {\n  pixelDensity(1);\n  createCanvas(640, 360);\n  colorMode(HSB, 1);\n\n  // Create the colors to be used for each possible iteration count\n  for (let n = 0; n < maxiterations; n++) {\n    // Gosh, we could make fancy colors here if we wanted\n    let hu = sqrt(n / maxiterations);\n    let col = color(hu, 255, 150);\n    colorsRed[n] = red(col);\n    colorsGreen[n] = green(col);\n    colorsBlue[n] = blue(col);\n  }\n}\n\nfunction draw() {\n  // let ca = map(mouseX, 0, width, -1, 1); //-0.70176;\n  // let cb = map(mouseY, 0, height, -1, 1); //-0.3842;\n\n  let ca = cos(angle * 3.213); //sin(angle);\n  let cb = sin(angle);\n\n  angle += 0.02;\n\n  background(255);\n\n  // Establish a range of values on the complex plane\n  // A different range will allow us to \"zoom\" in or out on the fractal\n\n  // It all starts with the width, try higher or lower values\n  //let w = abs(sin(angle)) * 5;\n  let w = 5;\n  let h = (w * height) / width;\n\n  // Start at negative half the width and height\n  let xmin = -w / 2;\n  let ymin = -h / 2;\n\n  // Make sure we can write to the pixels[] array.\n  // Only need to do this once since we don't do any other drawing.\n  loadPixels();\n\n  // x goes from xmin to xmax\n  let xmax = xmin + w;\n  // y goes from ymin to ymax\n  let ymax = ymin + h;\n\n  // Calculate amount we increment x,y for each pixel\n  let dx = (xmax - xmin) / width;\n  let dy = (ymax - ymin) / height;\n\n  // Start y\n  let y = ymin;\n  for (let j = 0; j < height; j++) {\n    // Start x\n    let x = xmin;\n    for (let i = 0; i < width; i++) {\n      // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?\n      let a = x;\n      let b = y;\n      let n = 0;\n      while (n < maxiterations) {\n        let aa = a * a;\n        let bb = b * b;\n        // Infinity in our finite world is simple, let's just consider it 16\n        if (aa + bb > 4.0) {\n          break; // Bail\n        }\n        let twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n\n      // We color each pixel based on how long it takes to get to infinity\n      // If we never got there, let's pick the color black\n      let pix = (i + j * width) * 4;\n      if (n == maxiterations) {\n        pixels[pix + 0] = 0;\n        pixels[pix + 1] = 0;\n        pixels[pix + 2] = 0;\n      } else {\n        // Otherwise, use the colors that we made in setup()\n        pixels[pix + 0] = colorsRed[n];\n        pixels[pix + 1] = colorsGreen[n];\n        pixels[pix + 2] = colorsBlue[n];\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  console.log(frameRate());\n}",
			"N":"Paste from noncoded source"
		},
		{"T":"Cwb5A=","P":4416,"L":"T","E":"\\b"},
		{"T":"CwcJ4=","P":1906,"L":"T","E":"\\b"},
		{"T":"CwcJ8=","P":1905,"L":"T","E":"\\b4"},
		{"T":"CwcLM=","P":1905,"L":"T","E":"\\b"},
		{"T":"CwcLU=","P":1904,"L":"T","E":"\\b480"},
		{"T":"CwcPM=","P":1924,"L":"T","E":"\\b"},
		{"T":"CwcPY=","P":1923,"L":"T","E":"\\b"},
		{"T":"CwcPk=","P":1922,"L":"T","E":"\\bRGB"},
		{"T":"Cwd/o=","P":"1932-2267","L":"T","E":"\\\\b[1932-2267]"},
		{"T":"CweAA=","P":1931,"L":"T","E":"\\b"},
		{"T":"CweDU=","P":2074,"L":"T","E":"\\b"},
		{"T":"CweDc=","P":2073,"L":"T","E":"\\b"},
		{"T":"CweDk=","P":2072,"L":"T","E":"\\bflaot"},
		{"T":"CweEk=","P":2076,"L":"T","E":"\\b"},
		{"T":"CweEs=","P":2075,"L":"T","E":"\\b"},
		{"T":"CweE0=","P":2074,"L":"T","E":"\\boat"},
		{"T":"CwejI=","P":"2002-2011","L":"C","E":"/-0.70176"},
		{
			"T":"Cwel0=",
			"P":"2083-2116",
			"L":"P",
			"E":"/-0.70176",
			"N":"Paste from install with UUID fragment 00000000-0000-0000-0000-000000000000 -1 bytes long;"
		},
		{"T":"Cwez4=","P":2083,"L":"T","E":"\\b"},
		{"T":"Cwe1k=","P":2091,"L":"T","E":";"},
		{"T":"Cwe30=","P":"2059-2067","L":"C","E":"/-0.3842"},
		{
			"T":"Cwe44=",
			"P":"2104-2115",
			"L":"P",
			"E":"/-0.3842",
			"N":"Paste from install with UUID fragment 00000000-0000-0000-0000-000000000000 -1 bytes long;"
		},
		{"T":"Cwe54=","P":2112,"L":"T","E":";"},
		{"T":"Cwe7E=","P":2104,"L":"T","E":"\\b"},
		{"T":"Cwe8Q=","P":"1957-2068","L":"T","E":"\\\\b[1957-2068]"},
		{"T":"Cwe8o=","P":1957,"L":"T","E":"\\b"},
		{"T":"CwfaQ=","P":2266,"L":"T","E":"\\b"},
		{"T":"CwfaY=","P":2265,"L":"T","E":"\\b"},
		{"T":"Cwfag=","P":2264,"L":"T","E":"\\bfloat"},
		{"T":"Cwfcc=","P":2281,"L":"T","E":"\\b"},
		{"T":"Cwfck=","P":2280,"L":"T","E":"\\b"},
		{"T":"Cwfco=","P":2279,"L":"T","E":"\\bflaot"},
		{"T":"CwfdQ=","P":2283,"L":"T","E":"\\b"},
		{"T":"CwfdY=","P":2282,"L":"T","E":"\\b"},
		{"T":"Cwfdg=","P":2281,"L":"T","E":"\\boat"},
		{"T":"Cwf6U=","P":"2367-2370","L":"T","E":"float"},
		{"T":"Cwf8Q=","P":"2390-2393","L":"T","E":"float"},
		{"T":"Cwf+s=","P":2395,"L":"T","E":".."},
		{"T":"CwgCQ=","P":2396,"L":"T","E":"\\b"},
		{"T":"CwgCc=","P":2395,"L":"T","E":"\\b"},
		{"T":"CwgKs=","P":"2580-2583","L":"T","E":"g"},
		{"T":"CwgK4=","P":2580,"L":"T","E":"\\bflao"},
		{"T":"CwgLw=","P":2583,"L":"T","E":"\\b"},
		{"T":"CwgL0=","P":2582,"L":"T","E":"\\boat"},
		{"T":"CwgNU=","P":"2635-2638","L":"T","E":"float"},
		{"T":"CwgO4=","P":"2715-2718","L":"T","E":"float"},
		{"T":"CwgQ0=","P":"2751-2754","L":"T","E":"float"},
		{"T":"CwgV8=","P":2547,"L":"T","E":"\n"},
		{"T":"CwgXU=","P":2548,"L":"T","E":"maxiterations"},
		{"T":"Cwgac=","P":2561,"L":"T","E":" = 100;"},
		{"T":"Cwglg=","P":"2823-2826","L":"T","E":"float"},
		{"T":"Cwgoo=","P":"2895-2898","L":"T","E":"float"},
		{"T":"CwgrY=","P":"2846-2849","L":"T","E":"int"},
		{"T":"CwgtI=","P":"2920-2923","L":"T","E":"int"},
		{"T":"Cwgu4=","P":"3034-3037","L":"T","E":"float"},
		{"T":"CwgwI=","P":"3053-3056","L":"T","E":"float"},
		{"T":"Cwgxk=","P":"3072-3075","L":"T","E":"float"},
		{"T":"Cwgy4=","P":"3127-3130","L":"T","E":"float"},
		{"T":"Cwg0A=","P":"3153-3156","L":"T","E":"float."},
		{"T":"CwhBM=","P":3118,"L":"T","E":" "},
		{"T":"CwhXo=","P":1796,"L":"T","E":"\\b"},
		{"T":"Cwhb0=","P":1796,"L":"T","E":";"},
		{"T":"Cwhfg=","P":1934,"L":"T","E":"\\b"},
		{"T":"Cwh0Q=","P":"1609-1845","L":"C","E":"let angle = 0;\n\n// Maximum number of iterations for each point on the complex plane\nconst maxiterations = 100;\n\n// Colors to be used for each possible iteration count\nconst colorsRed = [];\nconst colorsGreen = [];\nconst colorsBlue = [];\n"},
		{"T":"Cwh0Y=","P":"1609-1845","L":"T","E":"\\\\b[1609-1845]"},
		{"T":"CwiBQ=","P":3763,"L":"T","E":"\\\\b[3763-3763]}"},
		{"T":"CwiK0=","P":"1610-1618","L":"T","E":"void"},
		{"T":"CwiN4=","P":"1698-1706","L":"T","E":"foid"},
		{"T":"CwiTg=","P":2043,"L":"T","E":"\\b"},
		{"T":"CwiTo=","P":2042,"L":"T","E":"\\b"},
		{"T":"CwiTw=","P":2041,"L":"T","E":"\\b"},
		{"T":"CwiT4=","P":2040,"L":"T","E":"\\b"},
		{"T":"CwiXs=","P":2910,"L":"T","E":"\\b"},
		{"T":"Cwibc=","P":"2299-2319","L":"T","E":"\\\\b[2299-2319]"},
		{"T":"CwjGo=","P":1698,"L":"T","E":"\\bv"},
		{"T":"CwjMA=","P":"1738-1741","L":"T","E":"float"},
		{"T":"CwjRM=","P":"1761-1775","L":"T","E":"\\\\b[1761-1775]"},
		{"T":"Cwjek=","P":"1646-1658","L":"T","E":"size"},
		{"T":"Cwj6U=","P":2279,"L":"T","E":"int"},
		{"T":"Cwj6s=","P":2281,"L":"T","E":"\\b"},
		{"T":"Cwj60=","P":2280,"L":"T","E":"\\b"},
		{"T":"Cwj64=","P":2279,"L":"T","E":"\\b int maxIt"},
		{"T":"Cwj+o=","P":2288,"L":"T","E":"\\b"},
		{"T":"Cwj+s=","P":2287,"L":"T","E":"\\biterations = 100;"},
		{"T":"Cwkv0=","P":3731,"L":"T","E":"\\b"},
		{"T":"Cwkv8=","P":3730,"L":"T","E":"\\b"},
		{"T":"CwkxU=","P":"3709-3716","L":"T","E":"println"},
		{"T":"Cwky0=","P":3719,"L":"T","E":"\\b"},
		{"T":"Cwky4=","P":3718,"L":"T","E":"\\b"},
		{"T":"CwkzE=","P":3717,"L":"T","E":"\\b"},
		{"T":"CwkzQ=","P":3716,"L":"T","E":"\\b"},
		{"T":"Cwk9Q=","P":3716,"L":"T","E":",,,,"},
		{"T":"Cwk+0=","P":3719,"L":"T","E":"\\b"},
		{"T":"Cwk+8=","P":3718,"L":"T","E":"\\b"},
		{"T":"Cwk/E=","P":3717,"L":"T","E":"\\b"},
		{"T":"Cwk/M=","P":3716,"L":"T","E":"\\b"},
		{"T":"CwlcU=","P":"3057-3060","L":"T","E":"float"},
		{"T":"Cwlpc=","P":"3374-3445","L":"T","E":"i+j"},
		{"T":"CwlsA=","P":3377,"L":"T","E":"*width}"},
		{"T":"Cwluo=","P":3383,"L":"T","E":"\\b] = color(0);"},
		{"T":"CwmV0=","P":"3296-3299","L":"T","E":"float"},
		{"T":"CwmbE=","P":"3296-3301","L":"T","E":"int"},
		{"T":"Cwofg=","P":"3055-3133","L":"C","E":"  float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;"},
		{"T":"CwogI=","P":"3055-3133","L":"T","E":"\\\\b[3055-3133]"},
		{
			"T":"CwohM=",
			"P":2916,
			"L":"P",
			"E":"  float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;",
			"N":"paste from project on same machine;Paste from project with UUID fragment 48a00000-0000-0000-0000-000000000000 -1 bytes long;"
		},
		{"T":"CwohE=","P":2907,"L":"T","E":"\n        "},
		{"T":"CwoiQ=","P":2917,"L":"T","E":"\\b"},
		{"T":"Cwoio=","P":2916,"L":"T","E":"\\b"},
		{"T":"Cwolc=","P":3084,"L":"T","E":"*aa"},
		{"T":"Cwonc=","P":3092,"L":"T","E":"*bb"},
		{"T":"CwopI=","P":3098,"L":"T","E":"\\b16"},
		{"T":"CwqG8=","P":"2915-2992","L":"C","E":" float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;"},
		{"T":"CwqHU=","P":"2915-2992","L":"T","E":"\\\\b[2915-2992]"},
		{
			"T":"CwqJc=",
			"P":3070,
			"L":"P",
			"E":" float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;",
			"N":"paste from project on same machine;Paste from project with UUID fragment 48a00000-0000-0000-0000-000000000000 -1 bytes long;"
		},
		{"T":"CwqMY=","P":3022,"L":"T","E":"\\b"},
		{"T":"CwqMc=","P":3021,"L":"T","E":"\\b4"},
		{"T":"Cwqd0=","P":"2143-2261","L":"T","E":"\\\\b[2143-2261]"},
		{"T":"CwqeA=","P":2142,"L":"T","E":"\\b"},
		{"T":"Cwqfs=","P":"2047-2095","L":"T","E":"\\\\b[2047-2095]"},
		{"T":"CwqgI=","P":2046,"L":"T","E":"\\b"},
		{"T":"Cwqis=","P":"1775-1996","L":"T","E":"\\\\b[1775-1996]"},
		{"T":"Cwqi8=","P":1774,"L":"T","E":"\\b"},
		{"T":"Cwql8=","P":"0-1608","L":"T","E":"\\\\b[0-1608]"},
		{"T":"CwqnE=","P":1,"L":"T","E":"\\b"},
		{"T":"CwqnM=","P":0,"L":"T","E":"\\b"},
		{"T":"Cwqtc=","P":"419-469","L":"T","E":"\\\\b[419-469]"},
		{"T":"Cwqt0=","P":418,"L":"T","E":"\\b"},
		{"T":"CwquA=","P":417,"L":"T","E":"\\b"},
		{"T":"CwquM=","P":416,"L":"T","E":"\\b"},
		{"T":"Cwquc=","P":415,"L":"T","E":"\\b"},
		{"T":"Cwqvg=","P":"360-389","L":"T","E":"\\\\b[360-389]"},
		{"T":"Cwqwc=","P":"305-334","L":"T","E":"\\\\b[305-334]"},
		{"T":"Cwqx0=","P":"432-444","L":"T","E":"\\\\b[432-444]"},
		{"T":"Cwqy8=","P":"492-502","L":"T","E":"\\\\b[492-502]"},
		{"T":"Cwq0c=","P":"556-629","L":"T","E":"\\\\b[556-629]"},
		{"T":"Cwq1s=","P":"717-785","L":"T","E":"\\\\b[717-785]"},
		{"T":"Cwq2U=","P":716,"L":"T","E":"\\b"},
		{"T":"Cwq2g=","P":715,"L":"T","E":"\\b"},
		{"T":"Cwq2s=","P":714,"L":"T","E":"\\b"},
		{"T":"Cwq20=","P":713,"L":"T","E":"\\b"},
		{"T":"Cwq28=","P":712,"L":"T","E":"\\b"},
		{"T":"Cwq3E=","P":711,"L":"T","E":"\\b"},
		{"T":"Cwq3M=","P":710,"L":"T","E":"\\b"},
		{"T":"Cwq3Y=","P":709,"L":"T","E":"\\b"},
		{"T":"Cwq3o=","P":708,"L":"T","E":"\\b"},
		{"T":"Cwq6Y=","P":"884-1018","L":"T","E":"\\\\b[884-1018]"},
		{"T":"Cwrkw=","P":"64-67","L":"T","E":"HSB"},
		{"T":"CwsDo=","P":"1015-1190","L":"T","E":"p"},
		{"T":"CwsEU=","P":1015,"L":"T","E":"\\b"},
		{"T":"CwsEc=","P":1014,"L":"T","E":"\\bpixel"},
		{"T":"CwsG0=","P":1019,"L":"T","E":"s"},
		{"T":"CwsKI=","P":"968-991","L":"C","E":"[i+j*width] = color(0);"},
		{
			"T":"CwsKw=",
			"P":1020,
			"L":"P",
			"E":"[i+j*width] = color(0);",
			"N":"Paste from install with UUID fragment 00000000-0000-0000-0000-000000000000 -1 bytes long;"
		},
		{"T":"CwsNo=","P":1041,"L":"T","E":"\\b"},
		{"T":"CwsOE=","P":1040,"L":"T","E":"\\bsqrt(float(n)"},
		{"T":"CwsUA=","P":1053,"L":"T","E":"/mawiterations"},
		{"T":"CwsYo=","P":1067,"L":"T","E":"))"},
		{"T":"Cwsco=","P":1056,"L":"T","E":"\\bx"},
		{"T":"Cwsnk=","P":"601-606","L":"T","E":"int"},
		{"T":"Cws3g=","P":"64-67","L":"T","E":"RGB"},
		{"T":"CwtRs=","P":"64-67","L":"T","E":"HSB"},
		{"T":"CwtdU=","P":1004,"L":"T","E":"\n          "},
		{"T":"Cwteo=","P":1015,"L":"T","E":"float"},
		{"T":"CwuIA=","P":"1054-1081","L":"C","E":"sqrt(float(n)/maxiterations"},
		{"T":"CwuJI=","P":1020,"L":"T","E":" hu + "},
		{"T":"CwuK4=","P":1025,"L":"T","E":"\\b"},
		{
			"T":"CwuMU=",
			"P":1026,
			"L":"P",
			"E":"sqrt(float(n)/maxiterations",
			"N":"Paste from install with UUID fragment 00000000-0000-0000-0000-000000000000 -1 bytes long;"
		},
		{"T":"CwuK8=","P":1024,"L":"T","E":"\\b= "},
		{"T":"Cwud4=","P":1053,"L":"T","E":");"},
		{"T":"CwujY=","P":"1089-1117","L":"T","E":"hu,255,255"},
		{"T":"Cwu/s=","P":160,"L":"T","E":"\\b"},
		{"T":"Cwu/4=","P":159,"L":"T","E":"\\b"},
		{"T":"CwvAI=","P":158,"L":"T","E":"\\b0"},
		{"T":"CwvDY=","P":158,"L":"T","E":"\\b255"},
		{"T":"CwvV0=","P":"883-919","L":"T","E":"\\\\b[883-919]"},
		{"T":"Cwv7c=","P":"1060-1063","L":"T","E":"150"},
		{"T":"CwwIE=","P":"0-1153","L":"C","E":"void setup() {\n  pixelDensity(1);\n  size(640, 480);\n  colorMode(HSB, 1);\n\n  \n}\n\nvoid draw() {\n\n  float ca = -0.70176;\n  float cb = -0.3842;\n\n  \n\n  background(255);\n\n  float w = 5;\n  float h = (w * height) / width;\n\n  float xmin = -w / 2;\n  float ymin = -h / 2;\n\n  loadPixels();\n\n int maxiterations = 100;\n\n  float xmax = xmin + w;\n\n  float ymax = ymin + h;\n\n  float dx = (xmax - xmin) / width;\n  float dy = (ymax - ymin) / height;\n\n\n  float y = ymin;\n  for (int j = 0; j < height; j++) {\n    \n    float x = xmin;\n    for (int i = 0; i < width; i++) {\n     \n      float a = x;\n      float b = y;\n      int n = 0;\n      while (n < maxiterations) { \n        float aa = a * a;\n        float bb = b * b;\n       \n        if (aa*aa + bb*bb > 4.0) {\n          break; // Bail\n        }\n       float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n\n\n      if (n == maxiterations) {\n        pixels[i+j*width] = color(0);\n      } else {\n          float hu = sqrt(float(n)/maxiterations);\n       pixels[i+j*width] = color(hu,255,150);\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  println(frameRate);\n}"},
		{
			"T":"CwwbE=",
			"P":"0-1153",
			"L":"P",
			"E":"// Daniel Shiffman\n// http://codingtra.in\n// http://patreon.com/codingtrain\n// Code for: https://youtu.be/6z7GQewK-Ks\n\nvar minval = -0.5;\nvar maxval = 0.5;\n\nvar minSlider;\nvar maxSlider;\n\nvar frDiv;\n\nfunction setup() {\n  createCanvas(200, 200);\n  pixelDensity(1);\n\n  minSlider = createSlider(-2.5, 0, -2.5, 0.01);\n  maxSlider = createSlider(0, 2.5, 2.5, 0.01);\n\n  frDiv = createDiv('');\n}\n\nfunction draw() {\n  var maxiterations = 100;\n\n  loadPixels();\n  for (var x = 0; x < width; x++) {\n    for (var y = 0; y < height; y++) {\n\n      var a = map(x, 0, width, minSlider.value(), maxSlider.value());\n      var b = map(y, 0, height, minSlider.value(), maxSlider.value());\n\n      var ca = a;\n      var cb = b;\n\n      var n = 0;\n\n      while (n < maxiterations) {\n        var aa = a * a - b * b;\n        var bb = 2 * a * b;\n        a = aa + ca;\n        b = bb + cb;\n        if (a * a + b * b > 16) {\n          break;\n        }\n        n++;\n      }\n\n      var bright = map(n, 0, maxiterations, 0, 1);\n      bright = map(sqrt(bright), 0, 1, 0, 255);\n\n      if (n == maxiterations) {\n        bright = 0;\n      }\n\n      var pix = (x + y * width) * 4;\n      pixels[pix + 0] = bright;\n      pixels[pix + 1] = bright;\n      pixels[pix + 2] = bright;\n      pixels[pix + 3] = 255;\n    }\n  }\n  updatePixels();\n\n  frDiv.html(floor(frameRate()));\n}",
			"N":"Paste from noncoded source"
		},
		{"T":"Cwwdg=","P":1330,"L":"T","E":"\\b"},
		{"T":"CwweA=","P":1329,"L":"T","E":"\\b"},
		{
			"T":"CwxJY=",
			"P":"0-1329",
			"L":"P",
			"E":"void setup() {\n  pixelDensity(1);\n  size(640, 480);\n  colorMode(HSB, 1);\n\n  \n}\n\nvoid draw() {\n\n  float ca = -0.70176;\n  float cb = -0.3842;\n\n  \n\n  background(255);\n\n  float w = 5;\n  float h = (w * height) / width;\n\n  float xmin = -w / 2;\n  float ymin = -h / 2;\n\n  loadPixels();\n\n int maxiterations = 100;\n\n  float xmax = xmin + w;\n\n  float ymax = ymin + h;\n\n  float dx = (xmax - xmin) / width;\n  float dy = (ymax - ymin) / height;\n\n\n  float y = ymin;\n  for (int j = 0; j < height; j++) {\n    \n    float x = xmin;\n    for (int i = 0; i < width; i++) {\n     \n      float a = x;\n      float b = y;\n      int n = 0;\n      while (n < maxiterations) { \n        float aa = a * a;\n        float bb = b * b;\n       \n        if (aa*aa + bb*bb > 4.0) {\n          break; // Bail\n        }\n       float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n\n\n      if (n == maxiterations) {\n        pixels[i+j*width] = color(0);\n      } else {\n          float hu = sqrt(float(n)/maxiterations);\n       pixels[i+j*width] = color(hu,255,150);\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  println(frameRate);\n}\n",
			"N":"internal paste;"
		},
		{"T":"Cwy+o=","P":0,"L":"T","E":"\n"},
		{"T":"Cwy/M=","P":0,"L":"T","E":"\n"},
		{"T":"CwzAM=","P":0,"L":"T","E":"float angle = 0;"},
		{"T":"CwzIk=","P":16,"L":"T","E":"..."},
		{"T":"CwzKA=","P":18,"L":"T","E":"\\b"},
		{"T":"CwzKI=","P":17,"L":"T","E":"\\b"},
		{"T":"CwzKQ=","P":16,"L":"T","E":"\\b"},
		{"T":"CwzOE=","P":161,"L":"T","E":"angle+="},
		{"T":"CwzQY=","P":167,"L":"T","E":"\\b"},
		{"T":"CwzQg=","P":166,"L":"T","E":"\\b += 0.02;"},
		{"T":"CwzYk=","P":175,"L":"T","E":"....."},
		{"T":"Cwzbs=","P":179,"L":"T","E":"\\b"},
		{"T":"Cwzb0=","P":178,"L":"T","E":"\\b"},
		{"T":"Cwzb8=","P":177,"L":"T","E":"\\b"},
		{"T":"CwzcE=","P":176,"L":"T","E":"\\b"},
		{"T":"CwzcI=","P":175,"L":"T","E":"\\b"},
		{"T":"Cwzjo=","P":"126-133","L":"T","E":"cos(angle"},
		{"T":"CwzmY=","P":135,"L":"T","E":"*"},
		{"T":"Cwzns=","P":136,"L":"T","E":"\\b3.213"},
		{"T":"Cwzqs=","P":141,"L":"T","E":")"},
		{"T":"Cwzus=","P":"160-164","L":"T","E":"\\\\b[160-164]"},
		{"T":"Cwzuw=","P":159,"L":"T","E":"\\b"},
		{"T":"Cwzu4=","P":158,"L":"T","E":"\\b"},
		{"T":"CwzvM=","P":157,"L":"T","E":"\\bsin(angle);"},
		{"T":"CwzyM=","P":167,"L":"T","E":"\\b"},
		{"T":"Cw1Bw=","P":"35-51","L":"T","E":"\\\\b[35-51]"},
		{"T":"Cw1B8=","P":34,"L":"T","E":"\\b"},
		{"T":"Cw1CI=","P":33,"L":"T","E":"\\b"},
		{"T":"Cw1CU=","P":32,"L":"T","E":"\\b"},
		{"T":"Cw1DQ=","P":"63-66","L":"T","E":"RGB"},
		{"T":"Cw1JQ=","P":"1084-1087","L":"T","E":"255"},
		{"T":"Cw2yU=","P":"0-16","L":"T","E":"\\\\b[0-16]"},
		{"T":"Cw20Q=","P":"137-151","L":"T","E":"\\\\b[137-151]"},
		{"T":"Cw23A=","P":"122-133","L":"T","E":"\\\\b[122-133]map(mouseY"},
		{"T":"Cw298=","P":132,"L":"T","E":", 0, MouseX"},
		{"T":"Cw3Fc=","P":142,"L":"T","E":"\\b"},
		{"T":"Cw3Fk=","P":141,"L":"T","E":"\\b"},
		{"T":"Cw3Fs=","P":140,"L":"T","E":"\\b"},
		{"T":"Cw3F0=","P":139,"L":"T","E":"\\b"},
		{"T":"Cw3GA=","P":138,"L":"T","E":"\\b"},
		{"T":"Cw3Gk=","P":137,"L":"T","E":"\\bheight"},
		{"T":"Cw3I0=","P":143,"L":"T","E":",-1"},
		{"T":"Cw3Pc=","P":"91-108","L":"T","E":"-.7"},
		{"T":"Cw3Sc=","P":94,"L":"T","E":";"},
		{"T":"Cw3Uw=","P":"109-133","L":"T","E":".212;"},
		{"T":"Cw3kc=","P":"1-1128","L":"C","E":"\nvoid setup() {\n  size(640, 480);\n  colorMode(RGB, 1);\n\n  \n}\n\nvoid draw() {\n\n  float ca = -.7;\n  float cb = .212;\n\n  \n\n  background(255);\n\n  float w = 5;\n  float h = (w * height) / width;\n\n  float xmin = -w / 2;\n  float ymin = -h / 2;\n\n  loadPixels();\n\n int maxiterations = 100;\n\n  float xmax = xmin + w;\n\n  float ymax = ymin + h;\n\n  float dx = (xmax - xmin) / width;\n  float dy = (ymax - ymin) / height;\n\n\n  float y = ymin;\n  for (int j = 0; j < height; j++) {\n    \n    float x = xmin;\n    for (int i = 0; i < width; i++) {\n     \n      float a = x;\n      float b = y;\n      int n = 0;\n      while (n < maxiterations) { \n        float aa = a * a;\n        float bb = b * b;\n       \n        if (aa*aa + bb*bb > 4.0) {\n          break; // Bail\n        }\n       float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n\n\n      if (n == maxiterations) {\n        pixels[i+j*width] = color(0);\n      } else {\n          float hu = sqrt(float(n)/maxiterations);\n       pixels[i+j*width] = color(hu,255,255);\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  println(frameRate);\n}"},
		{"T":"Cw32U=","P":"2-425","L":"C","E":"void setup() {\n  size(640, 480);\n  colorMode(RGB, 1);\n\n  \n}\n\nvoid draw() {\n\n  float ca = -.7;\n  float cb = .212;\n\n  \n\n  background(255);\n\n  float w = 5;\n  float h = (w * height) / width;\n\n  float xmin = -w / 2;\n  float ymin = -h / 2;\n\n  loadPixels();\n\n int maxiterations = 100;\n\n  float xmax = xmin + w;\n\n  float ymax = ymin + h;\n\n  float dx = (xmax - xmin) / width;\n  float dy = (ymax - ymin) / height;\n\n\n  float y = ymin;"},
		{"T":"Cw38w=","P":"428-1129","L":"C","E":"for (int j = 0; j < height; j++) {\n    \n    float x = xmin;\n    for (int i = 0; i < width; i++) {\n     \n      float a = x;\n      float b = y;\n      int n = 0;\n      while (n < maxiterations) { \n        float aa = a * a;\n        float bb = b * b;\n       \n        if (aa*aa + bb*bb > 4.0) {\n          break; // Bail\n        }\n       float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n\n\n      if (n == maxiterations) {\n        pixels[i+j*width] = color(0);\n      } else {\n          float hu = sqrt(float(n)/maxiterations);\n       pixels[i+j*width] = color(hu,255,255);\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  println(frameRate);\n}\n"},
		{"T":"Cw4Tg=","P":"428-857","L":"C","E":"for (int j = 0; j < height; j++) {\n    \n    float x = xmin;\n    for (int i = 0; i < width; i++) {\n     \n      float a = x;\n      float b = y;\n      int n = 0;\n      while (n < maxiterations) { \n        float aa = a * a;\n        float bb = b * b;\n       \n        if (aa*aa + bb*bb > 4.0) {\n          break; // Bail\n        }\n       float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n"},
		{"T":"Cw4Ys=","P":"858-1129","L":"C","E":"\n      if (n == maxiterations) {\n        pixels[i+j*width] = color(0);\n      } else {\n          float hu = sqrt(float(n)/maxiterations);\n       pixels[i+j*width] = color(hu,255,255);\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  println(frameRate);\n}\n"},
		{"T":"Cw5J0=","P":1128,"L":"T","E":"\\b"},
		{"T":"Cw5nE=","P":94,"L":"T","E":"725"},
		{"T":"Cw5qU=","P":95,"L":"T","E":"\\b"},
		{"T":"Cw5qg=","P":94,"L":"T","E":"\\b"},
		{"T":"Cw5q4=","P":94,"L":"T","E":"\\b"},
		{"T":"Cw73Q=","P":0,"L":"T","E":"??"},
		{"T":"Cw73o=","P":1,"L":"T","E":"\\b"},
		{"T":"Cw73w=","P":0,"L":"T","E":"\\b//watched "},
		{"T":"Cw76Q=","P":9,"L":"T","E":"\\b"},
		{"T":"Cw76Y=","P":8,"L":"T","E":"\\b"},
		{"T":"Cw76g=","P":7,"L":"T","E":"\\b"},
		{"T":"Cw76o=","P":6,"L":"T","E":"\\b"},
		{"T":"Cw76s=","P":5,"L":"T","E":"\\b"},
		{"T":"Cw760=","P":4,"L":"T","E":"\\b"},
		{"T":"Cw768=","P":3,"L":"T","E":"\\b"},
		{"T":"Cw77Y=","P":2,"L":"T","E":"\\bWatched a Yotu"},
		{"T":"Cw7+c=","P":15,"L":"T","E":"\\b"},
		{"T":"Cw7+k=","P":14,"L":"T","E":"\\buTube video by "},
		{"T":"Cw8E4=","P":29,"L":"T","E":"The Coding Train"},
		{"T":"Cw8Jg=","P":45,"L":"T","E":" and cop"},
		{"T":"Cw8L0=","P":52,"L":"T","E":"\\b"},
		{"T":"Cw8L8=","P":51,"L":"T","E":"\\b"},
		{"T":"Cw8ME=","P":50,"L":"T","E":"\\bworked with freinds "},
		{"T":"Cw8PQ=","P":69,"L":"T","E":"\\b"},
		{"T":"Cw8PY=","P":68,"L":"T","E":"\\b"},
		{"T":"Cw8Pc=","P":67,"L":"T","E":"\\b"},
		{"T":"Cw8Pk=","P":66,"L":"T","E":"\\b"},
		{"T":"Cw8Ps=","P":65,"L":"T","E":"\\b"},
		{"T":"Cw8Pw=","P":64,"L":"T","E":"\\biends to make sure the "},
		{"T":"Cw8Uo=","P":87,"L":"T","E":"syntax was correct"},
		{"T":"Cw8YI=","P":"56-57","L":"T","E":"\n//"},
		{"T":"Cw8fI=","P":"0-1235","L":"C","E":"//Watched a YouTube video by The Coding Train and worked\n//with friends to make sure the syntax was correct\n\nvoid setup() {\n  size(640, 480);\n  colorMode(RGB, 1);\n\n  \n}\n\nvoid draw() {\n\n  float ca = -.7;\n  float cb = .212;\n\n  \n\n  background(255);\n\n  float w = 5;\n  float h = (w * height) / width;\n\n  float xmin = -w / 2;\n  float ymin = -h / 2;\n\n  loadPixels();\n\n int maxiterations = 100;\n\n  float xmax = xmin + w;\n\n  float ymax = ymin + h;\n\n  float dx = (xmax - xmin) / width;\n  float dy = (ymax - ymin) / height;\n\n\n  float y = ymin;\n  for (int j = 0; j < height; j++) {\n    \n    float x = xmin;\n    for (int i = 0; i < width; i++) {\n     \n      float a = x;\n      float b = y;\n      int n = 0;\n      while (n < maxiterations) { \n        float aa = a * a;\n        float bb = b * b;\n       \n        if (aa*aa + bb*bb > 4.0) {\n          break; // Bail\n        }\n       float twoab = 2.0 * a * b;\n        a = aa - bb + ca;\n        b = twoab + cb;\n        n++;\n      }\n\n\n      if (n == maxiterations) {\n        pixels[i+j*width] = color(0);\n      } else {\n          float hu = sqrt(float(n)/maxiterations);\n       pixels[i+j*width] = color(hu,255,255);\n      }\n      x += dx;\n    }\n    y += dy;\n  }\n  updatePixels();\n  println(frameRate);\n}"}
	]
}