{
	InstallUUIDStack:[
		"357e7030-1d33-4e59-9c29-2d0c824773fe"
	],
	InfectionStack:[
		"634ed958-b748-4f4d-9130-db0d1cba853c",
		"fef0bc1b-3706-450f-a6e8-430fd5dbe234",
		"357e7030-1d33-4e59-9c29-2d0c824773fe",
		"84541806-7175-4f88-a234-6a60512377b1",
		"20f1073b-ae0c-41c6-8101-485ae4f4622f"
	],
	ProjectUUID:"634ed958-b748-4f4d-9130-db0d1cba853c",
	CreatorUUID:"357e7030-1d33-4e59-9c29-2d0c824773fe",
	History:[
		{
			T:CeDoM=,
			P:0,
			L:"P",
			E:"import java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.image.BufferedImage;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\npublic class MandelbrotFractal extends JPanel {\n    \n    private static final int WIDTH = 800;\n    private static final int HEIGHT = 600;\n    private static final int MAX_ITERATIONS = 1000;\n    private static final double X_MIN = -2.5;\n    private static final double X_MAX = 1.5;\n    private static final double Y_MIN = -1.5;\n    private static final double Y_MAX = 1.5;\n    \n    private BufferedImage image;\n    \n    public MandelbrotFractal() {\n        super();\n        this.image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n        this.setPreferredSize(new java.awt.Dimension(WIDTH, HEIGHT));\n        drawFractal();\n    }\n    \n    private void drawFractal() {\n        double pixelWidth = (X_MAX - X_MIN) / WIDTH;\n        double pixelHeight = (Y_MAX - Y_MIN) / HEIGHT;\n        for (int x = 0; x < WIDTH; x++) {\n            for (int y = 0; y < HEIGHT; y++) {\n                double cx = X_MIN + x * pixelWidth;\n                double cy = Y_MIN + y * pixelHeight;\n                int color = getColor(cx, cy);\n                image.setRGB(x, y, color);\n            }\n        }\n    }\n    \n    private int getColor(double cx, double cy) {\n        double zx = 0;\n        double zy = 0;\n        int i;\n        for (i = 0; i < MAX_ITERATIONS; i++) {\n            double zxNew = zx * zx - zy * zy + cx;\n            double zyNew = 2 * zx * zy + cy;\n            zx = zxNew;\n            zy = zyNew;\n            if (zx * zx + zy * zy > 4) {\n                break;\n            }\n        }\n        if (i == MAX_ITERATIONS) {\n            return Color.BLACK.getRGB();\n        } else {\n            float hue = (float) i / MAX_ITERATIONS;\n            return Color.getHSBColor(hue, 1, 1).getRGB();\n        }\n    }\n    \n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        g.drawImage(image, 0, 0, null);\n    }\n    \n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Mandelbrot Fractal\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setContentPane(new MandelbrotFractal());\n        frame.pack();\n        frame.setVisible(true);\n    }\n}",
			N:"Paste from noncoded source"
		},
		{
			T:CeFFw=,
			P:0-2291,
			L:"P",
			E:"for each pixel (Px, Py) on the screen do\n    x0 := scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.00, 0.47))\n    y0 := scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1.12, 1.12))\n    x := 0.0\n    y := 0.0\n    iteration := 0\n    max_iteration := 1000\n    while (x*x + y*y ≤ 2*2 AND iteration < max_iteration) do\n        xtemp := x*x - y*y + x0\n        y := 2*x*y + y0\n        x := xtemp\n        iteration := iteration + 1\n    \n    color := palette[iteration]\n    plot(Px, Py, color)",
			N:"Paste from noncoded source"
		},
		{T:CeFks=,P:0,P:"T",E:"\n"},
		{T:CeFm4=,P:0,P:"T",E:"void setup(){"},
		{T:CeFs8=,P:547,P:"T",E:"\n    "},
		{T:CeFtQ=,P:551,P:"T",E:"\b"},
		{T:CeFtc=,P:550,P:"T",E:"\b"},
		{T:CeFtk=,P:549,P:"T",E:"\b"},
		{T:CeFtw=,P:548,P:"T",E:"\b\\b[548-548]}"},
		{
			T:CeGCQ=,
			P:18,
			L:"P",
			E:"color pink = color(255, 102, 204);\nloadPixels();\nfor (int i = 0; i < (width*height/2)-width/2; i++) {\n  pixels[i] = pink;\n}\nupdatePixels();",
			N:"Paste from noncoded source"
		},
		{T:CeGBo=,P:13,P:"T",E:"\n    "},
		{T:CeGXI=,P:158,P:"T",E:"	"},
		{T:CeGYA=,P:166,P:"T",E:"\b"},
		{T:CeGYI=,P:165,P:"T",E:"\b"},
		{T:CeGYQ=,P:164,P:"T",E:"\b"},
		{T:CeGYY=,P:163,P:"T",E:"\b"},
		{T:CeGYg=,P:162,P:"T",E:"\b"},
		{T:CeGdk=,P:168,P:"T",E:"\b"},
		{T:CeGdw=,P:167,P:"T",E:"\b"},
		{T:CeGd4=,P:166,P:"T",E:"\b"},
		{T:CeGd8=,P:165,P:"T",E:"\b"},
		{T:CeGeE=,P:164,P:"T",E:"\b"},
		{T:CeGeM=,P:163,P:"T",E:"\b"},
		{T:CeGeU=,P:162,P:"T",E:"\b"},
		{T:CeGj4=,P:186,P:"T",E:"\b"},
		{T:CeGkM=,P:185,P:"T",E:"\b"},
		{T:CeGkM=,P:184,P:"T",E:"\b"},
		{T:CeGkQ=,P:183,P:"T",E:"\b"},
		{T:CeGkQ=,P:182,P:"T",E:"\b"},
		{T:CeGkQ=,P:181,P:"T",E:"\b"},
		{T:CeGkU=,P:180,P:"T",E:"\b"},
		{T:CeGkU=,P:179,P:"T",E:"\b"},
		{T:CeGkU=,P:178,P:"T",E:"\b"},
		{T:CeGkY=,P:177,P:"T",E:"\b"},
		{T:CeGkY=,P:176,P:"T",E:"\b"},
		{T:CeGkg=,P:175,P:"T",E:"\b"},
		{T:CeGko=,P:174,P:"T",E:"\b"},
		{T:CeGks=,P:173,P:"T",E:"\b"},
		{T:CeGk0=,P:172,P:"T",E:"\b"},
		{T:CeGk4=,P:171,P:"T",E:"\b"},
		{T:CeGp0=,P:14-664,P:"T",E:"\\b[14-664]"},
		{T:CeGp8=,P:13,P:"T",E:"\b"},
		{T:CeGqE=,P:12,P:"T",E:"\b"},
		{T:CeGqM=,P:11,P:"T",E:"\b"},
		{T:CeGqg=,P:10,P:"T",E:"\b"},
		{T:CeGqg=,P:9,P:"T",E:"\b"},
		{T:CeGqg=,P:8,P:"T",E:"\b"},
		{T:CeGqk=,P:7,P:"T",E:"\b"},
		{T:CeGqk=,P:6,P:"T",E:"\b"},
		{T:CeGqk=,P:5,P:"T",E:"\b"},
		{T:CeGqo=,P:4,P:"T",E:"\b"},
		{T:CeGqo=,P:3,P:"T",E:"\b"},
		{T:CeGqo=,P:2,P:"T",E:"\b"},
		{T:CeGqs=,P:1,P:"T",E:"\b"},
		{T:CeGqs=,P:0,P:"T",E:"\b"},
		{T:CeGq4=,P:1,P:"T",E:"\b"},
		{T:CeGrA=,P:0,P:"T",E:"\b"},
		{
			T:CeG7U=,
			P:0,
			L:"P",
			E:"for each pixel (Px, Py) on the screen do\n    x0 := scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.00, 0.47))\n    y0 := scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1.12, 1.12))\n    x := 0.0\n    y := 0.0\n    iteration := 0\n    max_iteration := 1000\n    while (x*x + y*y ≤ 2*2 AND iteration < max_iteration) do\n        xtemp := x*x - y*y + x0\n        y := 2*x*y + y0\n        x := xtemp\n        iteration := iteration + 1\n    \n    color := palette[iteration]\n    plot(Px, Py, color)",
			N:"Paste from noncoded source"
		},
		{T:CeG9g=,P:0-533,P:"C",E:"for each pixel (Px, Py) on the screen do\n    x0 := scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.00, 0.47))\n    y0 := scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1.12, 1.12))\n    x := 0.0\n    y := 0.0\n    iteration := 0\n    max_iteration := 1000\n    while (x*x + y*y ≤ 2*2 AND iteration < max_iteration) do\n        xtemp := x*x - y*y + x0\n        y := 2*x*y + y0\n        x := xtemp\n        iteration := iteration + 1\n    \n    color := palette[iteration]\n    plot(Px, Py, color)"},
		{
			T:CeHZY=,
			P:0-533,
			L:"P",
			E:"for (int py = 0; py < screenHeight; py++) {\n    for (int px = 0; px < screenWidth; px++) {\n        double x0 = scaledXCoordinate(px, screenWidth, -2.00, 0.47);\n        double y0 = scaledYCoordinate(py, screenHeight, -1.12, 1.12);\n        double x = 0.0;\n        double y = 0.0;\n        int iteration = 0;\n        int max_iteration = 1000;\n        while (x*x + y*y <= 2*2 && iteration < max_iteration) {\n            double xtemp = x*x - y*y + x0;\n            y = 2*x*y + y0;\n            x = xtemp;\n            iteration++;\n        }\n        Color color = palette[iteration];\n        plot(px, py, color);\n    }\n}",
			N:"Paste from noncoded source"
		},
		{T:CeHiY=,P:0,P:"T",E:"\n"},
		{T:CeHkI=,P:0,P:"T",E:"sc"},
		{T:CeHmA=,P:1,P:"T",E:"\b"},
		{T:CeHmI=,P:0,P:"T",E:"\bint screenWidth, screenHeight"},
		{T:CeHuo=,P:29,P:"T",E:", scl"},
		{T:CeHv0=,P:33,P:"T",E:"\baled "},
		{T:CeHww=,P:37,P:"T",E:"\bXCoordinate, scaledYCoordinate, "},
		{T:CeH8c=,P:69,P:"T",E:"palette, plot;"},
		{
			T:CePbo=,
			P:0,
			L:"P",
			E:"size(640, 360);\nnoLoop();\nbackground(255);\n\n// Establish a range of values on the complex plane\n// A different range will allow us to \"zoom\" in or out on the fractal\n\n// It all starts with the width, try higher or lower values\nfloat w = 4;\nfloat h = (w * height) / width;\n\n// Start at negative half the width and height\nfloat xmin = -w/2;\nfloat ymin = -h/2;\n\n// Make sure we can write to the pixels[] array.\n// Only need to do this once since we don't do any other drawing.\nloadPixels();\n\n// Maximum number of iterations for each point on the complex plane\nint maxiterations = 100;\n\n// x goes from xmin to xmax\nfloat xmax = xmin + w;\n// y goes from ymin to ymax\nfloat ymax = ymin + h;\n\n// Calculate amount we increment x,y for each pixel\nfloat dx = (xmax - xmin) / (width);\nfloat dy = (ymax - ymin) / (height);\n\n// Start y\nfloat y = ymin;\nfor (int j = 0; j < height; j++) {\n  // Start x\n  float x = xmin;\n  for (int i = 0; i < width; i++) {\n\n    // Now we test, as we iterate z = z^2 + c does z tend towards infinity?\n    float a = x;\n    float b = y;\n    int n = 0;\n    float max = 4.0;  // Infinity in our finite world is simple, let's just consider it 4\n    float absOld = 0.0;\n    float convergeNumber = maxiterations; // this will change if the while loop breaks due to non-convergence\n    while (n < maxiterations) {\n      // We suppose z = a+ib\n      float aa = a * a;\n      float bb = b * b;\n      float abs = sqrt(aa + bb);\n      if (abs > max) { // |z| = sqrt(a^2+b^2)\n        // Now measure how much we exceeded the maximum: \n        float diffToLast = (float) (abs - absOld);\n        float diffToMax  = (float) (max - absOld);\n        convergeNumber = n + diffToMax/diffToLast;\n        break;  // Bail\n      }\n      float twoab = 2.0 * a * b;\n      a = aa - bb + x; // this operation corresponds to z -> z^2+c where z=a+ib c=(x,y)\n      b = twoab + y;\n      n++;\n      absOld = abs;\n    }\n\n    // We color each pixel based on how long it takes to get to infinity\n    // If we never got there, let's pick the color black\n    if (n == maxiterations) {\n      pixels[i+j*width] = color(0);\n    } else {\n      // Gosh, we could make fancy colors here if we wanted\n      float norm = map(convergeNumber, 0, maxiterations, 0, 1);\n      pixels[i+j*width] = color(map(sqrt(norm), 0, 1, 0, 255));\n    }\n    x += dx;\n  }\n  y += dy;\n}\nupdatePixels();",
			N:"paste from project with same creator;Paste from project with UUID fef0bc1b-3706-450f-a6e8-430fd5dbe234;"
		},
		{T:CePiw=,P:237,P:"T",E:"\b7"},
		{T:CePqc=,P:7,P:"T",E:"\b"},
		{T:CePqk=,P:6,P:"T",E:"\b"},
		{T:CePq0=,P:5,P:"T",E:"\b"},
		{T:CePtQ=,P:5,P:"T",E:"777"},
		{T:CePuc=,P:12,P:"T",E:"\b"},
		{T:CePuk=,P:11,P:"T",E:"\b"},
		{T:CePuo=,P:10,P:"T",E:"\b444"},
		{T:CePxI=,P:39,P:"T",E:"\b"},
		{T:CePxQ=,P:38,P:"T",E:"\b"},
		{T:CePxY=,P:37,P:"T",E:"\b"},
		{T:CePz8=,P:37,P:"T",E:"255"},
		{T:CeP6A=,P:336,P:"T",E:"\b3"},
		{T:CeP8U=,P:336,P:"T",E:"\b2"},
		{T:CeP+Y=,P:579,P:"T",E:"\b"},
		{T:CeP+g=,P:578,P:"T",E:"\b"},
		{T:CeP+k=,P:577,P:"T",E:"\b200"},
		{T:CeQAA=,P:579,P:"T",E:"\b"},
		{T:CeQAI=,P:578,P:"T",E:"\b"},
		{T:CeQAo=,P:577,P:"T",E:"\b350"},
		{T:CeQWk=,P:237,P:"T",E:"\b730"},
		{T:CeQas=,P:239,P:"T",E:"\b"},
		{T:CeQa0=,P:238,P:"T",E:"\b"},
		{T:CeQa8=,P:237,P:"T",E:"\b1"},
		{T:CeQd4=,P:237,P:"T",E:"\b2"},
		{T:CeQh0=,P:237,P:"T",E:"\b6"},
		{T:CeQmE=,P:237,P:"T",E:"\b5"},
		{T:CeQp4=,P:7,P:"T",E:"\b"},
		{T:CeQp8=,P:6,P:"T",E:"\b"},
		{T:CeQqA=,P:5,P:"T",E:"\b123312"},
		{T:CeQsw=,P:15,P:"T",E:"\b"},
		{T:CeQs4=,P:14,P:"T",E:"\b"},
		{T:CeQtI=,P:13,P:"T",E:"\b2342134"},
		{T:CeQv8=,P:10,P:"T",E:"\b"},
		{T:CeQwE=,P:9,P:"T",E:"\b"},
		{T:CeQw0=,P:17,P:"T",E:"\b"},
		{T:CeQw8=,P:16,P:"T",E:"\b"},
		{T:CeQxE=,P:15,P:"T",E:"\b"},
		{T:CeQ0M=,P:7,P:"T",E:"\b"},
		{T:CeQ14=,P:13,P:"T",E:"\b"},
		{T:CeQ4Y=,P:7,P:"T",E:"\b"},
		{T:CeQ4g=,P:6,P:"T",E:"\b"},
		{T:CeQ4s=,P:5,P:"T",E:"\b777"},
		{T:CeQ6w=,P:12,P:"T",E:"\b"},
		{T:CeQ60=,P:11,P:"T",E:"\b"},
		{T:CeQ68=,P:10,P:"T",E:"\b777"},
		{
			T:CeRxg=,
			P:0-2350,
			L:"P",
			E:"for (int py = 0; py < screenHeight; py++) {\n    for (int px = 0; px < screenWidth; px++) {\n        double x0 = scaledXCoordinate(px, screenWidth, -2.00, 0.47);\n        double y0 = scaledYCoordinate(py, screenHeight, -1.12, 1.12);\n        double x = 0.0;\n        double y = 0.0;\n        int iteration = 0;\n        int max_iteration = 1000;\n        while (x*x + y*y <= 2*2 && iteration < max_iteration) {\n            double xtemp = x*x - y*y + x0;\n            y = 2*x*y + y0;\n            x = xtemp;\n            iteration++;\n        }\n        Color color = palette[iteration];\n        plot(px, py, color);\n    }\n}\nNote: You will need to define screenWidth, screenHeight, scaledXCoordinate, scaledYCoordinate, palette, plot methods according to your specific implementation.\n\n\n\n\n\nUser\nGet the LinkedList at that tableIndex example code java\nChatGPT\nAssuming that you have a hash table implemented using an array of LinkedLists, you can get the LinkedList at a specific index in the array as follows:\n\nless\nCopy code\nLinkedList<Integer> hashTable[] = new LinkedList[10]; // Example hash table array\nint tableIndex = 5; // Index of the LinkedList to retrieve\n\nLinkedList<Integer> list = hashTable[tableIndex];\nIn the above code, hashTable is the array of LinkedLists, where each LinkedList holds a list of values that hash to the same index in the array. tableIndex is the index of the LinkedList you want to retrieve.\n\nBy accessing hashTable[tableIndex], you retrieve the LinkedList at the specified index. You can then assign this LinkedList to a new variable list of type LinkedList<Integer>.\n\n\n\n\n\nUser\nhow to code a fractal \nChatGPT\nFractals are complex geometric shapes that can be generated through recursive mathematical equations. There are many different types of fractals, each with its own unique properties and generating equations.\n\nHere is a simple example of how to code a fractal called the Sierpinski triangle in Java using recursion:\n\nscss\nCopy code\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class SierpinskiTriangle extends JPanel {\n\n    private int level; // level of recursion\n\n    public SierpinskiTriangle(int level) {\n        this.level = level;\n        setPreferredSize(new Dimension(600, 600));\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n\n        int height = getHeight();\n        int width = getWidth();\n        int triangleHeight = (int) (height * 0.8);\n        int triangleWidth = (int) (triangleHeight * Math.sqrt(3) / 2);\n\n        int x = (width - triangleWidth) / 2;\n        int y = (height - triangleHeight) / 2;\n\n        drawSierpinskiTriangle(g, level, x, y, triangleWidth, triangleHeight);\n    }\n\n    private void drawSierpinskiTriangle(Graphics g, int level, int x, int y, int width, int height) {\n        if (level == 0) {\n            int[] xPoints = {x, x + width / 2, x + width};\n            int[] yPoints = {y + height, y, y + height};\n            g.drawPolygon(xPoints, yPoints, 3);\n        } else {\n            int newWidth = width / 2;\n            int newHeight = height / 2;\n\n            drawSierpinskiTriangle(g, level - 1, x, y, newWidth, newHeight);\n            drawSierpinskiTriangle(g, level - 1, x + newWidth, y, newWidth, newHeight);\n            drawSierpinskiTriangle(g, level - 1, x + newWidth / 2, y + newHeight, newWidth, newHeight);\n        }\n    }\n\n    public static void main(String[] args) {\n        int level = 5;\n        SierpinskiTriangle triangle = new SierpinskiTriangle(level);\n\n        JFrame frame = new JFrame(\"Sierpinski Triangle\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.getContentPane().add(triangle);\n        frame.pack();\n        frame.setLocationRelativeTo(null);\n        frame.setVisible(true);\n    }\n}",
			N:"Paste from noncoded source"
		},
		{
			T:CeR/k=,
			P:774-3775,
			L:"P",
			E:"/** \n * Pentigree L-System \n * by Geraldine Sarmiento. \n * \n * This code was based on Patrick Dwyer's L-System class. \n */\n \n\nPentigreeLSystem ps;\n\nvoid setup() {\n  size(640, 360);\n  ps = new PentigreeLSystem();\n  ps.simulate(3);\n}\n\nvoid draw() {\n  background(0);\n  ps.render();\n}",
			N:"paste from project with same creator;Paste from project with UUID 84541806-7175-4f88-a234-6a60512377b1;"
		},
		{
			T:CeSBY=,
			P:0-1054,
			L:"P",
			E:"/** \n * Pentigree L-System \n * by Geraldine Sarmiento. \n * \n * This code was based on Patrick Dwyer's L-System class. \n */\n \n\nPentigreeLSystem ps;\n\nvoid setup() {\n  size(640, 360);\n  ps = new PentigreeLSystem();\n  ps.simulate(3);\n}\n\nvoid draw() {\n  background(0);\n  ps.render();\n}",
			N:"paste from project with same creator;Paste from project with UUID 84541806-7175-4f88-a234-6a60512377b1;"
		},
		{T:CeSh4=,P:0-280,P:"T",E:"\\b[0-280]"},
		{T:CeTIk=,P:0,P:"T",E:"si"},
		{T:CeTI8=,P:1,P:"T",E:"\b"},
		{T:CeTJA=,P:0,P:"T",E:"\b"},
		{T:CeTKk=,P:0,P:"T",E:"// An"},
		{T:CeTMQ=,P:4,P:"T",E:"\b"},
		{T:CeTMY=,P:3,P:"T",E:"\b"},
		{T:CeTMc=,P:2,P:"T",E:"\b"},
		{T:CeTMg=,P:1,P:"T",E:"\b"},
		{T:CeTMo=,P:0,P:"T",E:"\b"},
		{T:CeTPA=,P:0,P:"T",E:"/* "},
		{T:CeTP4=,P:2,P:"T",E:"\b* a"},
		{T:CeTRY=,P:4,P:"T",E:"\bStudent "},
		{T:CeTSY=,P:10,P:"T",E:"\b"},
		{T:CeTSs=,P:9,P:"T",E:"\b"},
		{T:CeTSw=,P:8,P:"T",E:"\b"},
		{T:CeTSw=,P:7,P:"T",E:"\b"},
		{T:CeTSw=,P:6,P:"T",E:"\b"},
		{T:CeTSw=,P:5,P:"T",E:"\b"},
		{T:CeTS0=,P:4,P:"T",E:"\b"},
		{T:CeTS0=,P:3,P:"T",E:"\b"},
		{T:CeTS0=,P:2,P:"T",E:"\b"},
		{T:CeTS4=,P:1,P:"T",E:"\b"},
		{T:CeTS4=,P:0,P:"T",E:"\b**/ student\nskdnkenf"},
		{T:CeTWc=,P:18,P:"T",E:"\b"},
		{T:CeTWw=,P:17,P:"T",E:"\b"},
		{T:CeTW0=,P:16,P:"T",E:"\b"},
		{T:CeTW0=,P:15,P:"T",E:"\b"},
		{T:CeTW0=,P:14,P:"T",E:"\b"},
		{T:CeTW4=,P:13,P:"T",E:"\b"},
		{T:CeTW4=,P:12,P:"T",E:"\b"},
		{T:CeTW4=,P:11,P:"T",E:"\b"},
		{T:CeTW8=,P:10,P:"T",E:"\b"},
		{T:CeTW8=,P:9,P:"T",E:"\b"},
		{T:CeTW8=,P:8,P:"T",E:"\b"},
		{T:CeTXA=,P:7,P:"T",E:"\b"},
		{T:CeTXA=,P:6,P:"T",E:"\b"},
		{T:CeTXA=,P:5,P:"T",E:"\b"},
		{T:CeTXE=,P:4,P:"T",E:"\b"},
		{T:CeTXE=,P:3,P:"T",E:"\b"},
		{T:CeTXE=,P:2,P:"T",E:"\b"},
		{T:CeTXI=,P:1,P:"T",E:"\b"},
		{T:CeTXI=,P:0,P:"T",E:"\b// Student Name\n// "},
		{T:CeTcQ=,P:20,P:"T",E:"5/ 4/ "},
		{T:CeTds=,P:25,P:"T",E:"\b"},
		{T:CeTdw=,P:24,P:"T",E:"\b"},
		{T:CeTd4=,P:23,P:"T",E:"\b"},
		{T:CeTeA=,P:22,P:"T",E:"\b"},
		{T:CeTeE=,P:21,P:"T",E:"\b/4/2023\n// Fract"},
		{T:CeTlY=,P:37,P:"T",E:"al Assignment "},
		{T:CeTnY=,P:50,P:"T",E:"\b"},
		{
			T:CeW8A=,
			P:52,
			L:"P",
			E:"/**\n * Recursive Tree\n * by Daniel Shiffman.  \n * \n * Renders a simple tree-like structure via recursion. \n * The branching angle is calculated as a function of \n * the horizontal mouse location. Move the mouse left\n * and right to change the angle.\n */\n \nfloat theta;   \n\nvoid setup() {\n  size(640, 360);\n}\n\nvoid draw() {\n  background(0);\n  frameRate(30);\n  stroke(255);\n  // Let's pick an angle 0 to 90 degrees based on the mouse position\n  float a = (mouseX / (float) width) * 90f;\n  // Convert it to radians\n  theta = radians(a);\n  // Start the tree from the bottom of the screen\n  translate(width/2,height);\n  // Draw a line 120 pixels\n  line(0,0,0,-120);\n  // Move to the end of that line\n  translate(0,-120);\n  // Start the recursive branching!\n  branch(120);\n\n}\n\nvoid branch(float h) {\n  // Each branch will be 2/3rds the size of the previous one\n  h *= 0.66;\n  \n  // All recursive functions must have an exit condition!!!!\n  // Here, ours is when the length of the branch is 2 pixels or less\n  if (h > 2) {\n    pushMatrix();    // Save the current state of transformation (i.e. where are we now)\n    rotate(theta);   // Rotate by theta\n    line(0, 0, 0, -h);  // Draw the branch\n    translate(0, -h); // Move to the end of the branch\n    branch(h);       // Ok, now call myself to draw two new branches!!\n    popMatrix();     // Whenever we get back here, we \"pop\" in order to restore the previous matrix state\n    \n    // Repeat the same thing, only branch off to the \"left\" this time!\n    pushMatrix();\n    rotate(-theta);\n    line(0, 0, 0, -h);\n    translate(0, -h);\n    branch(h);\n    popMatrix();\n  }\n}",
			N:"paste from project with same creator;Paste from project with UUID 20f1073b-ae0c-41c6-8101-485ae4f4622f;"
		},
		{T:CeW6s=,P:50,P:"T",E:"\n\n"},
		{T:Cei5o=,P:349,P:"T",E:"\b"},
		{T:Cei5w=,P:348,P:"T",E:"\b"},
		{T:Cei54=,P:347,P:"T",E:"\b"},
		{T:Cei8s=,P:347,P:"T",E:"7000"},
		{T:Cei9Q=,P:350,P:"T",E:"\b"},
		{T:Cei9Y=,P:349,P:"T",E:"\b"},
		{T:Cei9o=,P:348,P:"T",E:"\b"},
		{T:Cei9w=,P:347,P:"T",E:"\b"},
		{T:Cei/0=,P:347,P:"T",E:"800"},
		{T:CejE4=,P:352-355,P:"T",E:"\\b[352-355]800"},
		{
			T:CejSc=,
			P:388,
			L:"P",
			E:"255"
		},
		{T:CejSQ=,P:388,P:"T",E:"\b"},
		{
			T:CejZc=,
			P:392,
			L:"P",
			E:"173"
		},
		{T:CejY8=,P:391,P:"T",E:","},
		{T:CejbE=,P:392,P:"T",E:" "},
		{
			T:Cejfg=,
			P:398,
			L:"P",
			E:"251"
		},
		{T:Ceje4=,P:396,P:"T",E:", "},
		{T:CejvY=,P:432,P:"T",E:"\b"},
		{T:Cejvg=,P:431,P:"T",E:"\b"},
		{
			T:Cejv0=,
			P:430,
			L:"P",
			E:"142"
		},
		{T:Cejvo=,P:430,P:"T",E:"\b"},
		{
			T:CejzA=,
			P:435,
			L:"P",
			E:"92"
		},
		{T:Cejyw=,P:433,P:"T",E:", "},
		{
			T:Cej2M=,
			P:438,
			L:"P",
			E:"139"
		},
		{T:Cej2A=,P:437,P:"T",E:", "},
		{T:Cej3E=,P:441,P:"T",E:"\b"},
		{T:Cej38=,P:438,P:"T",E:" "},
		{T:Cej5A=,P:417,P:"T",E:"\b"},
		{T:Cej5I=,P:416,P:"T",E:"\b60"},
		{T:CekaA=,P:554,P:"T",E:"\b"},
		{T:CekaE=,P:553,P:"T",E:"\b180"},
		{T:CeknY=,P:52-305,P:"T",E:"\\b[52-305]"},
		{T:Cekn8=,P:53,P:"T",E:"\b"},
		{T:CekoE=,P:52,P:"T",E:"\b"},
		{T:CekoQ=,P:51,P:"T",E:"\b"},
		{T:Cekok=,P:50,P:"T",E:"\b\n"},
		{T:Cekz8=,P:475,P:"T",E:"\b"},
		{T:Cek0E=,P:474,P:"T",E:"\b00"},
		{T:Cek1w=,P:530,P:"T",E:"\b"},
		{T:Cek14=,P:529,P:"T",E:"\b00"},
		{T:Cek94=,P:470,P:"T",E:"\b100"},
		{T:CelBk=,P:472,P:"T",E:"\b"},
		{T:CelBs=,P:471,P:"T",E:"\b"},
		{T:CelB4=,P:470,P:"T",E:"\b0"},
		{T:CelDU=,P:475,P:"T",E:"\b"},
		{T:CelDc=,P:474,P:"T",E:"\b"},
		{T:CelDg=,P:473,P:"T",E:"\b"},
		{T:CelD4=,P:472,P:"T",E:"\b200"},
		{T:CelJE=,P:474,P:"T",E:"\b"},
		{T:CelJM=,P:473,P:"T",E:"\b"},
		{T:CelJQ=,P:472,P:"T",E:"\b-100"},
		{T:CelRE=,P:475,P:"T",E:"\b"},
		{T:CelRI=,P:474,P:"T",E:"\b"},
		{T:CelR8=,P:473,P:"T",E:"\b150"},
		{T:CelXU=,P:475,P:"T",E:"\b"},
		{T:CelXc=,P:474,P:"T",E:"\b20"},
		{T:Celsk=,P:581,P:"T",E:"\b"},
		{T:Celso=,P:580,P:"T",E:"\b"},
		{T:Celsw=,P:579,P:"T",E:"\b150"},
		{T:Celx8=,P:581,P:"T",E:"\b"},
		{T:CelyE=,P:580,P:"T",E:"\b"},
		{T:CelyI=,P:579,P:"T",E:"\b2"},
		{T:CelzM=,P:579,P:"T",E:"\b500"},
		{T:Cel24=,P:581,P:"T",E:"\b"},
		{T:Cel3A=,P:580,P:"T",E:"\b"},
		{T:Cel3E=,P:579,P:"T",E:"\b250"},
		{T:CemGw=,P:683,P:"T",E:"\b"},
		{T:CemG4=,P:682,P:"T",E:"\b52"},
		{T:CemMo=,P:683,P:"T",E:"\b"},
		{T:CemMw=,P:682,P:"T",E:"\b71"},
		{T:CemUI=,P:683,P:"T",E:"\b"},
		{T:CemUM=,P:682,P:"T",E:"\b333"},
		{T:CemYw=,P:684,P:"T",E:"\b"},
		{T:CemY4=,P:683,P:"T",E:"\b"},
		{T:CemZE=,P:682,P:"T",E:"\b77"},
		{T:Cemgo=,P:683,P:"T",E:"\b"},
		{T:Cemgs=,P:682,P:"T",E:"\b69"},
		{T:Cemqk=,P:475,P:"T",E:"\b"},
		{T:Cemqo=,P:474,P:"T",E:"\b00"},
		{T:Cemvw=,P:433-458,P:"T",E:"\\b[433-458]"},
		{T:Cemv8=,P:432,P:"T",E:"\b"},
		{T:CemwI=,P:431,P:"T",E:"\b"},
		{T:CemwQ=,P:430,P:"T",E:"\b"},
		{T:CemxU=,P:451-484,P:"T",E:"\\b[451-484]"},
		{T:Cemxg=,P:450,P:"T",E:"\b"},
		{T:CemyY=,P:473-507,P:"T",E:"\\b[473-507]"},
		{T:Cemyg=,P:472,P:"T",E:"\b"},
		{T:Cemys=,P:471,P:"T",E:"\b"},
		{T:Cemz4=,P:353-401,P:"T",E:"\\b[353-401]"},
		{T:Cem0A=,P:352,P:"T",E:"\b"},
		{T:Cem0M=,P:351,P:"T",E:"\b"},
		{T:Cem00=,P:303-329,P:"T",E:"\\b[303-329]"},
		{T:Cem1A=,P:302,P:"T",E:"\b"},
		{T:Cem14=,P:189-257,P:"T",E:"\\b[189-257]"},
		{T:Cem2A=,P:188,P:"T",E:"\b"},
		{T:Cem3g=,P:368-428,P:"T",E:"\\b[368-428]"},
		{T:Cem3s=,P:367,P:"T",E:"\b"},
		{T:Cem5A=,P:384-509,P:"T",E:"\\b[384-509]"},
		{T:Cem5I=,P:383,P:"T",E:"\b"},
		{T:Cem68=,P:386,P:"T",E:"\b"},
		{T:Cem7E=,P:385,P:"T",E:"\b"},
		{T:Cem7M=,P:384,P:"T",E:"\b"},
		{T:Cem7Q=,P:383,P:"T",E:"\b"},
		{T:Cem7Y=,P:382,P:"T",E:"\b"},
		{T:Cem7g=,P:381,P:"T",E:"\b"},
		{T:Cem7w=,P:380,P:"T",E:"\b"},
		{T:Cem+I=,P:714-799,P:"T",E:"\\b[714-799]"},
		{T:Cem+8=,P:643-693,P:"T",E:"\\b[643-693]"},
		{T:Cem/0=,P:590-622,P:"T",E:"\\b[590-622]"},
		{T:CenAw=,P:549-567,P:"T",E:"\\b[549-567]"},
		{T:CenBc=,P:506-524,P:"T",E:"\\b[506-524]"},
		{T:CenCo=,P:417-484,P:"T",E:"\\b[417-484]"},
		{T:CeoFI=,P:290,P:"T",E:"\b"},
		{T:CeoFQ=,P:289,P:"T",E:"\b"},
		{T:CeoFY=,P:288,P:"T",E:"\b"},
		{T:CeoFg=,P:287,P:"T",E:"\b"},
		{T:CeoH8=,P:287,P:"T",E:"ellipse"},
		{T:CeoLU=,P:451,P:"T",E:"="},
		{T:CeoLc=,P:451,P:"T",E:"\b"},
		{T:CeoLk=,P:450,P:"T",E:"\b"},
		{T:CeoLo=,P:449,P:"T",E:"\b"},
		{T:CeoLw=,P:448,P:"T",E:"\b"},
		{T:CeoL0=,P:447,P:"T",E:"\belipse"},
		{T:CeoQI=,P:449,P:"T",E:"l"},
		{T:CepUQ=,P:453,P:"T",E:"\b"},
		{T:CepUY=,P:452,P:"T",E:"\b"},
		{T:CepUg=,P:451,P:"T",E:"\b"},
		{T:CepUk=,P:450,P:"T",E:"\b"},
		{T:CepUs=,P:449,P:"T",E:"\b"},
		{T:CepU0=,P:448,P:"T",E:"\b"},
		{T:CepU4=,P:447,P:"T",E:"\bline"},
		{T:CepYM=,P:450,P:"T",E:"\b"},
		{T:CepYU=,P:449,P:"T",E:"\b"},
		{T:CepYc=,P:448,P:"T",E:"\b"},
		{T:CepYk=,P:447,P:"T",E:"\bellipse"},
		{T:CepbY=,P:657,P:"T",E:"\b"},
		{T:Cepbc=,P:656,P:"T",E:"\b"},
		{T:Cepbk=,P:655,P:"T",E:"\b"},
		{T:Cepbo=,P:654,P:"T",E:"\bellipse"},
		{T:Cepmk=,P:348,P:"T",E:"//"},
		{T:Ceppk=,P:349,P:"T",E:"\b"},
		{T:Cepps=,P:348,P:"T",E:"\b"},
		{T:Ceprw=,P:348,P:"T",E:"?8=="},
		{T:CeptI=,P:351,P:"T",E:"\b"},
		{T:CeptQ=,P:350,P:"T",E:"\b"},
		{T:CeptU=,P:349,P:"T",E:"\b"},
		{T:CeptY=,P:348,P:"T",E:"\b?"},
		{T:Cepuk=,P:348,P:"T",E:"\b/**"},
		{T:Cepy4=,P:717,P:"T",E:"?**"},
		{T:Cep0Q=,P:719,P:"T",E:"\b"},
		{T:Cep0Y=,P:718,P:"T",E:"\b"},
		{T:Cep0g=,P:717,P:"T",E:"\b"},
		{T:Cep1A=,P:732,P:"T",E:"\n    "},
		{T:Cep2g=,P:737,P:"T",E:"**/"},
		{T:Cep6U=,P:737-740,P:"C",E:"**/"},
		{T:Cep6s=,P:737-740,P:"T",E:"\\b[737-740]\\"},
		{T:Cep60=,P:737,P:"T",E:"\b"},
		{T:CeqQw=,P:348,P:"T",E:"\b"},
		{T:CeqWw=,P:660,P:"T",E:"\b"},
		{T:CeqW4=,P:659,P:"T",E:"\b"},
		{T:CeqW8=,P:658,P:"T",E:"\b"},
		{T:CeqXE=,P:657,P:"T",E:"\b"},
		{T:CeqXM=,P:656,P:"T",E:"\b"},
		{T:CeqXU=,P:655,P:"T",E:"\b"},
		{T:CeqXY=,P:654,P:"T",E:"\bbox"},
		{T:CeqZw=,P:453,P:"T",E:"\b"},
		{T:CeqZ4=,P:452,P:"T",E:"\b"},
		{T:CeqZ8=,P:451,P:"T",E:"\b"},
		{T:CeqaA=,P:450,P:"T",E:"\b"},
		{T:CeqaM=,P:449,P:"T",E:"\b"},
		{T:CeqaQ=,P:448,P:"T",E:"\b"},
		{T:CeqaY=,P:447,P:"T",E:"\bbox"},
		{T:Ceqc8=,P:293,P:"T",E:"\b"},
		{T:CeqdE=,P:292,P:"T",E:"\b"},
		{T:CeqdI=,P:291,P:"T",E:"\b"},
		{T:CeqdQ=,P:290,P:"T",E:"\b"},
		{T:CerQQ=,P:161,P:"T",E:"\b"},
		{T:CerQU=,P:160,P:"T",E:"\b30"},
		{T:Cer0M=,P:412,P:"T",E:"\b"},
		{T:Cer0c=,P:411,P:"T",E:"\b"},
		{T:Cer0w=,P:410,P:"T",E:"\b"},
		{T:Cer08=,P:409,P:"T",E:"\b"},
		{T:Cer1E=,P:408,P:"T",E:"\b"},
		{T:Cer1M=,P:407,P:"T",E:"\b"},
		{T:Cer1Q=,P:406,P:"T",E:"\b"},
		{T:Cer1Y=,P:405,P:"T",E:"\b"},
		{T:Cer1g=,P:404,P:"T",E:"\b"},
		{T:Cer1o=,P:403,P:"T",E:"\b"},
		{T:Cer8g=,P:403,P:"T",E:"scale"},
		{T:CesEw=,P:403,P:"T",E:"//"},
		{T:CesPI=,P:404,P:"T",E:"\b"},
		{T:CesPQ=,P:403,P:"T",E:"\b"},
		{T:CesWQ=,P:406,P:"T",E:"\b"},
		{T:CesWY=,P:405,P:"T",E:"\b"},
		{T:CesWg=,P:404,P:"T",E:"\b"},
		{T:CesWk=,P:403,P:"T",E:"\bapply"},
		{T:CesaI=,P:407,P:"T",E:"\b"},
		{T:CesaQ=,P:406,P:"T",E:"\b"},
		{T:CesaY=,P:405,P:"T",E:"\b"},
		{T:Cesac=,P:404,P:"T",E:"\b"},
		{T:Cesaw=,P:403,P:"T",E:"\bpop"},
		{T:Cesns=,P:405,P:"T",E:"\b"},
		{T:Cesn0=,P:404,P:"T",E:"\bush"},
		{T:CetoE=,P:453,P:"T",E:"\b"},
		{T:CetoM=,P:452,P:"T",E:"\b"},
		{T:CetoQ=,P:451,P:"T",E:"\b"},
		{T:CetoY=,P:450,P:"T",E:"\b"},
		{T:Cetoc=,P:449,P:"T",E:"\b"},
		{T:Cetog=,P:448,P:"T",E:"\b"},
		{T:Cetoo=,P:447,P:"T",E:"\barc"},
		{T:Cet1k=,P:459,P:"T",E:" 0, 0,"},
		{T:Cet7w=,P:293,P:"T",E:"\b"},
		{T:Cet74=,P:292,P:"T",E:"\b"},
		{T:Cet8A=,P:291,P:"T",E:"\b"},
		{T:Cet8E=,P:290,P:"T",E:"\b"},
		{T:Cet8M=,P:289,P:"T",E:"\b"},
		{T:Cet8Q=,P:288,P:"T",E:"\b"},
		{T:Cet8k=,P:287,P:"T",E:"\barc"},
		{T:Cet+k=,P:297,P:"T",E:"0, 0, "},
		{T:CeuLQ=,P:665,P:"T",E:"==="},
		{T:CeuMA=,P:667,P:"T",E:"\b"},
		{T:CeuMI=,P:666,P:"T",E:"\b"},
		{T:CeuMM=,P:665,P:"T",E:"\b"},
		{T:CeuMU=,P:664,P:"T",E:"\b"},
		{T:CeuMY=,P:663,P:"T",E:"\b"},
		{T:CeuMg=,P:662,P:"T",E:"\b"},
		{T:CeuMk=,P:661,P:"T",E:"\b"},
		{T:CeunI=,P:185,P:"T",E:"\b"},
		{T:CeunQ=,P:184,P:"T",E:"\b"},
		{T:CeunY=,P:183,P:"T",E:"\b444"},
		{T:CeuxU=,P:304-307,P:"T",E:"\\b[304-307]"},
		{T:Ceuxk=,P:303,P:"T",E:"\b0"},
		{T:Ceu28=,P:303,P:"T",E:"\b"},
		{T:Ceu3k=,P:302,P:"T",E:"\b"},
		{T:Ceu3s=,P:301,P:"T",E:"\b"},
		{T:Ceu30=,P:300,P:"T",E:"\b"},
		{T:Ceu38=,P:299,P:"T",E:"\b0,0"},
		{T:Ceu+8=,P:391,P:"T",E:"\b6"},
		{T:CevEE=,P:391,P:"T",E:"\b1"},
		{T:CevJU=,P:391,P:"T",E:"\b2"},
		{T:CevMA=,P:322,P:"T",E:"\b"},
		{T:CevMI=,P:321,P:"T",E:"\b"},
		{T:CevMQ=,P:320,P:"T",E:"\b"},
		{T:CevMU=,P:319,P:"T",E:"\b0"},
		{T:CevQI=,P:319,P:"T",E:"\b-500"},
		{T:CevU4=,P:322,P:"T",E:"\b"},
		{T:CevVA=,P:321,P:"T",E:"\b"},
		{T:CevVc=,P:320,P:"T",E:"\b300"},
		{T:Cezvk=,P:50,P:"T",E:"\n//"},
		{T:Cez68=,P:53,P:"T",E:" "},
		{T:Cez8Q=,P:54,P:"T",E:"I was "},
		{T:Cez9A=,P:59,P:"T",E:"\b"},
		{T:Cez9I=,P:58,P:"T",E:"\b"},
		{T:Cez9Q=,P:57,P:"T",E:"\b"},
		{T:Cez9U=,P:56,P:"T",E:"\b"},
		{T:Cez9c=,P:55,P:"T",E:"\b did this assignment through looking at t"},
		{T:Ce0CA=,P:95,P:"T",E:"\bvarious examples given in the IDE "},
		{T:Ce0Go=,P:128,P:"T",E:"\b\n// I was interested in "},
		{T:Ce0Mg=,P:152,P:"T",E:"user interaction so I go"},
		{T:Ce0Qg=,P:175,P:"T",E:"\b"},
		{T:Ce0Qk=,P:174,P:"T",E:"\bgot the code t"},
		{T:Ce0SI=,P:187,P:"T",E:"\bfrom an example that tracks your mouse location\n// I all"},
		{T:Ce0as=,P:242,P:"T",E:"\bso played with "},
		{T:Ce0ck=,P:256,P:"T",E:"\b"},
		{T:Ce0cs=,P:255,P:"T",E:"\b"},
		{T:Ce0cw=,P:254,P:"T",E:"\bth "},
		{T:Ce0d4=,P:256,P:"T",E:"\b various c"},
		{T:Ce0gY=,P:265,P:"T",E:"\bshapes"},
		{T:Ce0hw=,P:270,P:"T",E:"\b outputs and "},
		{T:Ce0mc=,P:283,P:"T",E:"translations adn"},
		{T:Ce0oQ=,P:298,P:"T",E:"\b"},
		{T:Ce0oU=,P:297,P:"T",E:"\bnd got a "},
		{T:Ce0qM=,P:305,P:"T",E:"\b"},
		{T:Ce0qQ=,P:304,P:"T",E:"\bto a "},
		{T:Ce0uQ=,P:308,P:"T",E:"\bn acceptaboe,"},
		{T:Ce0wM=,P:320,P:"T",E:"\b"},
		{T:Ce0wQ=,P:319,P:"T",E:"\ble "},
		{T:Ce0w4=,P:321,P:"T",E:"\b"},
		{T:Ce0xA=,P:320,P:"T",E:"\b"},
		{T:Ce0xE=,P:319,P:"T",E:"\b"},
		{T:Ce0xM=,P:318,P:"T",E:"\ble point. "},
		{T:Ce0yc=,P:327,P:"T",E:"\b"},
		{T:Ce0yg=,P:326,P:"T",E:"\b\n\n"},
		{T:Ce0zg=,P:327,P:"T",E:"\b//\n// this was really fun and would p"},
		{T:Ce04Y=,P:363,P:"T",E:"\bprobably use this IDE "},
		{T:Ce08Q=,P:384,P:"T",E:"\b"},
		{T:Ce08k=,P:383,P:"T",E:"\b"},
		{T:Ce08k=,P:382,P:"T",E:"\b"},
		{T:Ce08k=,P:381,P:"T",E:"\b"},
		{T:Ce08o=,P:380,P:"T",E:"\b"},
		{T:Ce08o=,P:379,P:"T",E:"\b"},
		{T:Ce08o=,P:378,P:"T",E:"\b"},
		{T:Ce08s=,P:377,P:"T",E:"\b"},
		{T:Ce08s=,P:376,P:"T",E:"\b"},
		{T:Ce08s=,P:375,P:"T",E:"\b"},
		{T:Ce08w=,P:374,P:"T",E:"\b"},
		{T:Ce08w=,P:373,P:"T",E:"\b"},
		{T:Ce08w=,P:372,P:"T",E:"\b"},
		{T:Ce080=,P:371,P:"T",E:"\b"},
		{T:Ce080=,P:370,P:"T",E:"\b"},
		{T:Ce080=,P:369,P:"T",E:"\b"},
		{T:Ce084=,P:368,P:"T",E:"\b"},
		{T:Ce084=,P:367,P:"T",E:"\b"},
		{T:Ce084=,P:366,P:"T",E:"\b"},
		{T:Ce088=,P:365,P:"T",E:"\b"},
		{T:Ce088=,P:364,P:"T",E:"\b"},
		{T:Ce09M=,P:363,P:"T",E:"\blike to learn more about "},
		{T:Ce1B4=,P:388,P:"T",E:"sketching in the future. "},
		{T:Ce1FM=,P:50,P:"T",E:"\n//"}
	]
}